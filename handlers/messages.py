import io
from datetime import datetime
from decouple import config

from aiogram import F, Router, Bot
from aiogram.types import Message, BufferedInputFile, MessageReactionUpdated
from aiogram.fsm.context import FSMContext

from keyboards.inline_keyboard import back_home_kb, image_response_kb, no_response_kb, home_kb, retry_plan_kb
from states import UserStates
from utils.converters import param_input_converter, goal_converter
from utils.gemini import generate_nutrition_plan
from utils.nutrition import get_output
from db_handler.database import change_param, get_db, get_profile
from aiogram.exceptions import TelegramBadRequest

start_msg_router = Router()

async def delete_original_message(original_message_id, bot, message):
    if original_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=original_message_id)
        except TelegramBadRequest:
            pass
    else:
        pass

@start_msg_router.message(F.photo, UserStates.waiting_for_image)
async def handle_image(message: Message, state: FSMContext, bot: Bot):

    state_data = await state.get_data()

    image = message.photo[-1]
    file_info = await bot.get_file(image.file_id)

    buffer = io.BytesIO()
    await bot.download_file(file_info.file_path, destination=buffer)
    buffer.seek(0)

    file_bytes = buffer.getvalue()
    file_name = f"{message.message_id}_{image.file_unique_id}.png"
    input_file = BufferedInputFile(file=file_bytes, filename=file_name)

    main_menu_message_id = state_data.get('menu_message_id')
    await state.clear()
    if main_menu_message_id:
        await state.update_data(menu_message_id=main_menu_message_id)

    await message.delete()
    await delete_original_message(state_data.get('original_message_id'), bot, message)

    answer = await message.answer(text='–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...')
    await bot.send_chat_action(message.chat.id, 'upload_photo')
    response = await get_output(file_bytes)
    match response:
        case False:
            await answer.edit_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', reply_markup=no_response_kb())
        case 'api_error':
             await answer.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=no_response_kb())
        case _:
            dishes = response.get('dishes', response) if isinstance(response, dict) else response
            dish_data = [(dish['dish_ru'], dish['weight'], dish['calories_per_100g'], dish['calories_per_total']) for dish in dishes]
            output = ''
            for dish_name, dish_weight, dish_calories_per_100g, dish_total_calories in dish_data:
                output += f"–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: {dish_name}\n–í–µ—Å: {dish_weight}–≥\n–ö–∞–ª–æ—Ä–∏–∏ (100–≥): {dish_calories_per_100g} –∫–∫–∞–ª\n–ö–∞–ª–æ—Ä–∏–∏ ({dish_weight}–≥): {dish_total_calories} –∫–∫–∞–ª\n\n"
            await answer.delete()
            await message.answer_photo(photo=input_file, caption=f'{output}', reply_markup=image_response_kb())

@start_msg_router.message(UserStates.waiting_for_param)
async def handle_param(message: Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    original_message_id = state_data.get('original_message_id')
    param = state_data.get('param')
    output = param_input_converter(message.text, param)
    if not output:
        await bot.edit_message_text(text=f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö ({message.text})', reply_markup=back_home_kb(), message_id=original_message_id, chat_id=message.chat.id)
    else:
        await change_param(message.from_user.id, param, output)
        await bot.edit_message_text(text='–ü–∞—Ä–∞–º–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', reply_markup=back_home_kb(), message_id=original_message_id, chat_id=message.chat.id)
    await message.delete()
    await state.clear()

@start_msg_router.message_reaction()
async def handle_reaction(message_reaction: MessageReactionUpdated, bot: Bot):
    if message_reaction.user.id == int(config("ADMINS")):
        c_db = get_db()
        
        cursor = await c_db.execute("PRAGMA table_info(users)")
        columns_info = await cursor.fetchall()
        column_names = [col[1] for col in columns_info]
        
        query = f"SELECT {', '.join(column_names)} FROM users"
        cursor = await c_db.execute(query)
        rows = await cursor.fetchall()
        
        users_info = []
        for row in rows:
            user_data = []
            for i, value in enumerate(row):
                col_name = column_names[i]
                formatted_value = value if value is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω'
                user_data.append(f"{col_name}: {formatted_value}")
            users_info.append("\n".join(user_data))
        
        all_users_info = "\n\n".join(users_info)
        try:
            await bot.edit_message_text(
                text=f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({datetime.now()}):\n\n{all_users_info}",
                message_id=message_reaction.message_id,
                chat_id=message_reaction.chat.id,
                reply_markup=back_home_kb()
            )
        except TelegramBadRequest:
            await bot.send_message(
                chat_id=message_reaction.chat.id,
                text=f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({datetime.now()}):\n\n{all_users_info}",
                reply_markup=back_home_kb()
            )


@start_msg_router.message(UserStates.waiting_for_diet_preferences)
async def handle_diet_preferences(message: Message, state: FSMContext, bot: Bot):
    preferences = message.text
    user_id = message.from_user.id

    state_data = await state.get_data()
    original_message_id = state_data.get('original_message_id')

    await message.delete()
    
    if len(preferences) > 100:
        await bot.edit_message_text(
            text="–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤.",
            chat_id=message.chat.id,
            message_id=original_message_id,
            reply_markup=retry_plan_kb()
        )
        return

    c_profile = (await get_profile(user_id))
    await bot.edit_message_text(
        text=f"–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ {c_profile['daily_kcal']} –∫–∫–∞–ª –≤ –¥–µ–Ω—å —Å–æ–∑–¥–∞—ë—Ç—Å—è...",
        chat_id=message.chat.id,
        message_id=original_message_id
    )

    await bot.send_chat_action(message.chat.id, 'typing')

    preferences_text = preferences if preferences.lower() != '–Ω–µ—Ç' else None
    response = await generate_nutrition_plan(c_profile['daily_kcal'], goal_converter(c_profile['goal']), preferences_text)

    await state.clear()

    match response:
        case 'api_error':
            await bot.edit_message_text(
                text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                chat_id=message.chat.id,
                message_id=original_message_id,
                reply_markup=back_home_kb()
            )
        case _:
            days = response.get('days', [])
            if not days:
                await bot.edit_message_text(
                    text='–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                    chat_id=message.chat.id,
                    message_id=original_message_id,
                    reply_markup=back_home_kb()
                )
                return

            full_plan = f"üçΩÔ∏è –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é ({c_profile['daily_kcal']} –∫–∫–∞–ª/–¥–µ–Ω—å)"
            if preferences_text:
                full_plan += f"\nüìù –° —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {preferences_text}"
            full_plan += "\n\n"

            for day in days:
                day_name = day['day_name'].capitalize()
                day_calories = day['calories']
                day_proteins = day['proteins']
                day_fats = day['fats']
                day_carbs = day['carbs']

                full_plan += f"üìÖ {day_name} (–ë: {day_proteins}–≥, –ñ: {day_fats}–≥, –£: {day_carbs}–≥, {day_calories} –∫–∫–∞–ª)\n\n"

                breakfast = day['breakfast'][0]
                full_plan += f"üç≥ –ó–∞–≤—Ç—Ä–∞–∫: {breakfast['dish_name']}\n"
                full_plan += f"{breakfast['description']}\n"
                full_plan += f"–ë: {breakfast['proteins']}–≥, –ñ: {breakfast['fats']}–≥, –£: {breakfast['carbs']}–≥, {breakfast['calories']} –∫–∫–∞–ª\n\n"

                lunch = day['lunch'][0]
                full_plan += f"ü•ó –û–±–µ–¥: {lunch['dish_name']}\n"
                full_plan += f"{lunch['description']}\n"
                full_plan += f"–ë: {lunch['proteins']}–≥, –ñ: {lunch['fats']}–≥, –£: {lunch['carbs']}–≥, {lunch['calories']} –∫–∫–∞–ª\n\n"

                dinner = day['dinner'][0]
                full_plan += f"üç≤ –£–∂–∏–Ω: {dinner['dish_name']}\n"
                full_plan += f"{dinner['description']}\n"
                full_plan += f"–ë: {dinner['proteins']}–≥, –ñ: {dinner['fats']}–≥, –£: {dinner['carbs']}–≥, {dinner['calories']} –∫–∫–∞–ª\n\n"

                full_plan += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

            full_plan += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {response.get('commentary', [])}"

            await bot.delete_message(chat_id=message.chat.id, message_id=original_message_id)
            await message.answer(full_plan, reply_markup=home_kb())