import io
from datetime import datetime
from decouple import config

from aiogram import F, Router, Bot
from aiogram.types import Message, BufferedInputFile, MessageReactionUpdated
from aiogram.fsm.context import FSMContext

from keyboards.inline_keyboard import back_home_kb, image_response_kb, no_response_kb
from states import UserStates
from utils.converters import param_input_converter
from utils.nutrition import get_output
from db_handler.database import change_param, get_db

start_msg_router = Router()

async def delete_original_message(original_message_id, bot, message):
    if original_message_id:
        await bot.delete_message(chat_id=message.chat.id, message_id=original_message_id)
    else:
        pass

@start_msg_router.message(F.photo, UserStates.waiting_for_image)
async def handle_image(message: Message, state: FSMContext, bot: Bot):

    state_data = await state.get_data()

    image = message.photo[-1]
    file_info = await bot.get_file(image.file_id)

    buffer = io.BytesIO()
    await bot.download_file(file_info.file_path, destination=buffer)
    buffer.seek(0)

    file_bytes = buffer.getvalue()
    file_name = f"{message.message_id}_{image.file_unique_id}.png"
    input_file = BufferedInputFile(file=file_bytes, filename=file_name)

    main_menu_message_id = state_data.get('menu_message_id')
    await state.clear()
    if main_menu_message_id:
        await state.update_data(menu_message_id=main_menu_message_id)

    await message.delete()
    await delete_original_message(state_data.get('original_message_id'), bot, message)

    answer = await message.answer(text='–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...')
    await bot.send_chat_action(message.chat.id, 'upload_photo')
    response = await get_output(file_bytes)
    match response:
        case False:
            await answer.edit_text('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', reply_markup=no_response_kb())
        case 'api_error':
             await answer.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑', reply_markup=no_response_kb())
        case _:
            dish_data = [(dish['dish_ru'], dish['weight'], dish['calories_per_100g'], dish['calories_per_total']) for dish in response['dishes']]
            output = ''
            for dish_name, dish_weight, dish_calories_per_100g, dish_total_calories in dish_data:
                output += f"–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞: {dish_name}\n–í–µ—Å: {dish_weight}–≥\n–ö–∞–ª–æ—Ä–∏–∏ (100–≥): {dish_calories_per_100g} –∫–∫–∞–ª\n–ö–∞–ª–æ—Ä–∏–∏ ({dish_weight}–≥): {dish_total_calories} –∫–∫–∞–ª\n\n"
            await answer.delete()
            await message.answer_photo(photo=input_file, caption=f'{output}', reply_markup=image_response_kb())

@start_msg_router.message(UserStates.waiting_for_param)
async def handle_param(message: Message, state: FSMContext, bot: Bot):
    state_data = await state.get_data()
    original_message_id = state_data.get('original_message_id')
    param = state_data.get('param')
    output = param_input_converter(message.text, param)
    if not output:
        await bot.edit_message_text(text=f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö ({message.text})', reply_markup=back_home_kb(), message_id=original_message_id, chat_id=message.chat.id)
    else:
        await change_param(message.from_user.id, param, output)
        await bot.edit_message_text(text='–ü–∞—Ä–∞–º–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', reply_markup=back_home_kb(), message_id=original_message_id, chat_id=message.chat.id)
    await message.delete()
    await state.clear()

@start_msg_router.message_reaction()
async def handle_reaction(message_reaction: MessageReactionUpdated, bot: Bot):
    if message_reaction.user.id == int(config("ADMINS")):
        c_db = get_db()
        cursor = await c_db.execute('SELECT user_id, height, weight, age, sex, goal, bmi, created_at FROM users')
        rows = await cursor.fetchall()
        users_info = "\n\n".join([f"üë§ ID: {row[0]}\nüìè –†–æ—Å—Ç: {row[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω'} —Å–º\n‚öñÔ∏è –í–µ—Å: {row[2] or '–Ω–µ —É–∫–∞–∑–∞–Ω'} –∫–≥\nüî¢ –í–æ–∑—Ä–∞—Å—Ç: {row[3] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüë´ –ü–æ–ª: {row[4] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüéØ –¶–µ–ª—å: {row[5] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\nüìà –ò–ú–¢: {row[6] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüìÖ –°–æ–∑–¥–∞–Ω: {row[7]}\n" for row in rows])
        await bot.edit_message_text(text=f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({datetime.now()}):\n\n{users_info}", message_id=message_reaction.message_id, chat_id=message_reaction.chat.id, reply_markup=back_home_kb())
